{{! themes/default/partials/header.hbs }}
{{!
  Modern header component using SparkType Design System utilities and Alpine.js.
  Features a clean slide-out mobile menu with backdrop overlay.
}}
<div x-data="{ isMobileMenuOpen: false }" @keydown.escape.window="isMobileMenuOpen = false">
<header class="sticky top-0 z-40 border-b border-border bg-background backdrop-blur supports-[backdrop-filter]:bg-background/95 font-headings">
    <div class=" px-6">
        <div class="flex h-14 items-center justify-between">
            
            {{!-- Site Logo/Title --}}
            <div class="flex-shrink-0">
                <a href="{{#if @root.options.isExport}}/index.html{{else}}/{{/if}}" class="flex items-center space-x-2 font-bold text-xl hover:text-primary transition-colors">
                    {{#if @root.headContext.logoUrl}}
                        <img src="{{@root.headContext.logoUrl}}" alt="{{@root.manifest.title}} logo" class="h-10 w-auto">
                    {{/if}}
                    <span>{{@root.manifest.title}}</span>
                </a>
            </div>

            {{!-- Desktop Navigation --}}
            <nav class="hidden md:flex items-center space-x-6">
                {{#each @root.navLinks}}
                    {{#if this.children.length}}
                        <div class="relative" 
                            x-data="{ 
                                open: false,
                                alignRight: false,
                                handleMouseEnter() {
                                    this.open = true;
                                    this.alignRight = ($el.getBoundingClientRect().right + 200) > window.innerWidth;
                                },
                                handleMouseLeave() {
                                    this.open = false;
                                }
                            }" 
                            @mouseenter="handleMouseEnter()" 
                            @mouseleave="handleMouseLeave()">
                            
                            <a href="{{this.href}}" 
                               class="flex items-center space-x-1 text-text hover:text-primary transition-colors font-medium"
                               :aria-expanded="open.toString()">
                                <span>{{this.label}}</span>
                                <svg class="w-4 h-4 transform transition-transform duration-200" 
                                     :class="{ 'rotate-180': open }" 
                                     fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                            </a>
                            
                            {{!-- Dropdown Menu --}}
                            <div x-show="open" 
                                 x-transition:enter="transition ease-out duration-200"
                                 x-transition:enter-start="opacity-0 translate-y-1"
                                 x-transition:enter-end="opacity-100 translate-y-0"
                                 x-transition:leave="transition ease-in duration-150"
                                 x-transition:leave-start="opacity-100 translate-y-0"
                                 x-transition:leave-end="opacity-0 translate-y-1"
                                 :class="alignRight ? 'right-0' : 'left-0'"
                                 class="absolute mt-2 w-48 bg-background border border-border rounded-md shadow-lg z-50"
                                 x-cloak>
                                <div class="py-1">
                                    {{#each this.children}}
                                        <a href="{{this.href}}" 
                                           class="block px-4 py-2 text-sm text-text hover:bg-muted hover:text-heading transition-colors">
                                            {{this.label}}
                                        </a>
                                    {{/each}}
                                </div>
                            </div>
                        </div>
                    {{else}}
                        <a href="{{this.href}}" 
                           class="text-text hover:text-primary transition-colors font-medium">
                            {{this.label}}
                        </a>
                    {{/if}}
                {{/each}}
            </nav>

            {{!-- Mobile Menu Button --}}
            <div class="flex md:hidden">
                <button 
                    @click="isMobileMenuOpen = true" 
                    type="button" 
                    class="inline-flex items-center justify-center p-2 rounded-md text-text hover:text-primary transition-colors"
                    aria-controls="mobile-menu" 
                    aria-label="Open main menu"
                >
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
    
    {{!-- Header Announcement Banner --}}
    {{#if (themeData 'header_announcement')}}
        <div class="bg-primary/10 border-t border-border">
            <div class="container mx-auto px-4 py-2">
                <div class="text-center text-sm text-primary">
                    {{{themeData 'header_announcement'}}}
                </div>
            </div>
        </div>
    {{/if}}
</header>

{{!-- Mobile Menu Backdrop --}}
<div x-show="isMobileMenuOpen" 
     x-transition:enter="transition-opacity ease-out duration-300"
     x-transition:enter-start="opacity-0"
     x-transition:enter-end="opacity-100"
     x-transition:leave="transition-opacity ease-in duration-200"
     x-transition:leave-start="opacity-100"
     x-transition:leave-end="opacity-0"
     @click="isMobileMenuOpen = false"
     class="fixed inset-0 z-40 bg-black/50 backdrop-blur-sm md:hidden"
     x-cloak>
</div>

{{!-- Mobile Menu Panel --}}
<div x-show="isMobileMenuOpen" 
     x-transition:enter="transform transition ease-in-out duration-300"
     x-transition:enter-start="translate-x-full"
     x-transition:enter-end="translate-x-0"
     x-transition:leave="transform transition ease-in-out duration-300"
     x-transition:leave-start="translate-x-0"
     x-transition:leave-end="translate-x-full"
     class="fixed top-0 right-0 bottom-0 z-50 w-80 bg-background border-l border-border shadow-xl flex flex-col md:hidden"
     id="mobile-menu"
     role="dialog"
     aria-modal="true"
     aria-labelledby="mobile-menu-title"
     x-cloak
     x-trap="isMobileMenuOpen">
     
    {{!-- Mobile Menu Header --}}
    <div class="flex items-center justify-between p-4 border-b border-border">
        <h2 id="mobile-menu-title" class="text-lg font-semibold text-heading">Menu</h2>
        <button @click="isMobileMenuOpen = false" 
                type="button" 
                class="inline-flex items-center justify-center p-2 rounded-md text-text hover:text-primary transition-colors"
                aria-label="Close menu">
            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
    </div>

    {{!-- Mobile Navigation --}}
    <nav class="flex-1 overflow-y-auto p-4">
        <div class="space-y-2">
            {{#each @root.navLinks}}
                {{#if this.children.length}}
                    {{!-- Navigation Item with Submenu --}}
                    <div x-data="{ open: false }" class="space-y-1">
                        <div class="flex items-center justify-between">
                            <a href="{{this.href}}" 
                               class="flex-1 block px-3 py-2 text-base font-medium text-text hover:text-primary hover:bg-muted rounded-md transition-colors"
                               @click="isMobileMenuOpen = false">
                                {{this.label}}
                            </a>
                            <button @click="open = !open" 
                                    type="button"
                                    class="inline-flex items-center justify-center p-1 rounded-md text-muted hover:text-text transition-colors"
                                    :aria-expanded="open.toString()">
                                <svg class="h-4 w-4 transform transition-transform duration-200" 
                                     :class="{ 'rotate-180': open }"
                                     fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                            </button>
                        </div>
                        
                        {{!-- Submenu --}}
                        <div x-show="open" 
                             x-transition:enter="transition-all ease-out duration-200"
                             x-transition:enter-start="opacity-0 -translate-y-1"
                             x-transition:enter-end="opacity-100 translate-y-0"
                             x-transition:leave="transition-all ease-in duration-150"
                             x-transition:leave-start="opacity-100 translate-y-0"
                             x-transition:leave-end="opacity-0 -translate-y-1"
                             class="pl-4 space-y-1 border-l-2 border-border ml-3">
                            {{#each this.children}}
                                <a href="{{this.href}}" 
                                   class="block px-3 py-2 text-sm text-muted hover:text-text hover:bg-muted rounded-md transition-colors"
                                   @click="isMobileMenuOpen = false">
                                    {{this.label}}
                                </a>
                            {{/each}}
                        </div>
                    </div>
                {{else}}
                    {{!-- Simple Navigation Item --}}
                    <a href="{{this.href}}" 
                       class="block px-3 py-2 text-base font-medium text-text hover:text-primary hover:bg-muted rounded-md transition-colors"
                       @click="isMobileMenuOpen = false">
                        {{this.label}}
                    </a>
                {{/if}}
            {{/each}}
        </div>
    </nav>
</div>
</div>